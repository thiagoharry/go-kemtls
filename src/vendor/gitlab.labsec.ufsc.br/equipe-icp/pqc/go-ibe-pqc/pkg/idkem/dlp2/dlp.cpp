#include <sys/random.h>
#include <stdio.h>
#include "tls_pqibe.h"
#include "dlp.h"

const int16_t sk_id[] = {17427,5481,11717,2709,18990,-6238,-17547,2027,4061,-4631,-23,3412,12873,-8107,-1699,6678,-1083,1705,-6004,2774,16557,4366,-10825,10903,1756,6881,-25568,-322,-17991,-13050,8943,7500,7358,10447,7829,6314,-6985,-9464,13680,7832,7106,15844,5551,13145,1950,-12963,3632,6773,-128,8671,17307,2054,3956,-2813,1548,12496,14130,8814,-27578,-3152,-408,-983,-16798,-2807,-11168,219,11395,6367,-9928,-2227,-15149,-507,7877,4774,-6751,6896,-2466,-11105,24353,24179,-3902,25488,-3414,8697,11411,853,-1340,-1297,4458,-15319,3430,-3586,10809,-2748,-7217,6033,6831,-18159,12216,4395,-1343,-1450,-4613,3367,-13378,13129,5442,2509,3152,8105,12764,-6831,6600,-2091,2901,7563,14642,-19547,14228,-12571,10836,4384,15431,-3523,-5408,-1546,-14063,5632,-24408,-27872,-5032,7874,9251,-9140,18705,-8817,-8968,16093,-12684,-1129,-6338,-5697,4893,-5885,-3056,9635,7287,-13307,-7784,3713,-1377,-734,15123,-1801,6724,4171,-11671,5203,7084,-4160,10483,1852,19384,13593,13166,5641,8138,-16547,16902,1112,-6621,-7555,15165,1320,20371,18137,6126,14740,21371,17539,-8372,8527,1770,2705,9349,-5665,-2176,10560,3785,9924,-5357,1208,-19450,-10552,-2090,-1079,-12323,9823,25139,14484,15436,-3052,14406,13746,-8160,-10664,-4265,-7453,-6872,6781,-15771,-1497,-2909,14834,-18087,-13590,-3843,-544,18322,7586,3025,11815,-13969,-14900,1405,-7978,6093,-21992,1881,-2547,12628,4075,834,19042,1403,-905,-13397,-5,-19527,1712,23459,13483,-3476,3356,12249,17258,8353,8105,-3952,-17172,-8404,-790,5649,-15055,-9041,-11029,983,6834,28652,-5093,4886,8837,5515,-1090,-9781,4875,2422,-817,-21674,-1930,-4324,4672,13993,-16685,-4886,-4790,-6134,6371,-821,5939,-2235,-2512,2815,-7837,-15251,-14046,-10248,14277,-8793,-4343,10246,-2302,-9660,-21118,-8149,6277,26173,3432,15103,6285,-7489,-29638,-115,7942,1804,9079,658,5051,-6485,-4237,-21995,-7406,-9505,5514,-6678,8021,-8367,-6990,22168,1723,-2296,10631,7647,-5836,-12666,10618,2984,-11028,-17173,5594,-4342,-1759,5762,-6956,12594,-531,6537,-978,10586,1114,-4752,9331,-1525,-2180,10271,-1773,243,7320,533,1791,-4502,6539,5963,-16519,-1354,-3793,-3347,-19503,-1501,-22213,-8743,10695,-2720,15813,-481,-2703,883,-910,-3096,3492,9343,5903,-10007,1340,131,-14933,22394,-16576,-3805,1933,3223,15998,12066,11904,-12856,13939,-4631,4844,-89,-4798,-9692,-1444,5285,-8968,3751,8432,18677,-2560,-8470,15395,-4829,-8029,5974,-23551,-9051,-6994,-15820,227,-11797,19615,-5912,8078,-13472,-781,8102,3253,-4004,17975,-3340,-2173,3644,14622,8206,-13381,3951,7222,-12626,14391,3153,12489,-12229,-11891,12544,1630,-2324,-2795,361,-12797,905,14805,-5740,8113,-7665,-2401,-6117,15976,8919,5291,4653,21564,-9251,-13751,852,-18317,-5742,-13060,-5225,-6150,-4787,-14565,-3530,-15265,16879,-22087,-16352,724,-6708,10304,6029,19506,14774,-7612,-17372,6290,11876,9281,1659,-12775,3602,8848,5269,6765,-1887,-7459,-3589,-653,-6389,5968,9236,-7762,-11643,5681,4340,-9449,-15397,12826,-8248,10367,1186,3180,-8531,6271,-9565,7304,-6442,6138,13320,8819,-19209,-2200,18585,2849,-13497,11098,-1967,-5841,2528,-11657,17708,14126,10766,19193,-5431,12741,-12181,-8406,5901,12205,-7833,-13666,-10544,-8832,-16072,2052,-14619,2178,13462,-4979,12481,11187,15216,-1316,27502,6074,-13444,-3759,-4750,-1542,-20890,9203,36,20093,15623,-2406,14113,-9608,-2424,12360,-1530,17645,-8374,-22849,9537,7094,7238,1764,8568,-10396,1248,652,11405,9663,-18563,18092,-16995,-29299,-13502,-15856,6506,57,807,18225,-123,-9658,-26877,2774,3995,-5151,58,-2128,7043,-7686,-8682,-11509,5420,382,-380,-8479,-5230,4335,18186,7606,-3748,-4538,-5415,-1249,-14683,4596,-2287,2462,19996,-13523,15675,-4084,3340,-8451,-1177,843,7742,1808,4398,16740,1606,3760,20451,-5674,5473,-483,-7170,-7796,-16740,9839,3027,6775,-1787,-7783,3107,11386,-6385,-4929,18993,-8966,-12178,20079,-3261,-12737,6492,6289,18675,-2891,-6436,-11719,8805,11615,13981,7140,-8288,-17855,-7419,-5714,4503,10451,-29220,-2084,15216,786,-20371,-3129,9848,12923,69,1564,6401,-11150,1135,2828,12101,10556,1998,-2915,-7168,-1453,7894,-1982,-13292,-4847,3540,-15800,-13984,-1963,2656,5148,-15304,-1408,-5476,3665,-717,-10138,14892,-7216,7193,-594,3678,-18363,-18803,-5853,-4513,-9946,2259,-11437,-2254,7272,-3361,-6573,-6156,3154,2777,-11573,955,-1813,-5940,4330,398,-1616,-20264,-8307,14223,-1074,-6932,-113,1344,-8307,-5453,18800,-6226,-2277,5666,-11443,5664,-15298,-18631,-4623,-21167,-1762,-5678,7600,15567,-1363,6905,4515,3657,-219,235,-8394,19344,12922,-1732,3578,2116,-325,6911,11773,-1306,-15541,-6194,1654,-7036,-7735,-11066,-414,2966,-6844,-24037,1471,-12680,-6017,-10792,2458,-18517,954,12084,6097,22793,-20555,-5704,7694,9795,3905,-6888,5199,-12432,-6635,-8461,-8941,22928,-7963,11536,-16628,1354,-1795,19058,1240,3592,3930,-8217,-12032,-7125,-17422,7887,-5139,-1830,16848,6836,1832,15753,-5328,16098,-11480,375,-4555,-10168,13418,-4639,-8470,-1834,-9947,913,13174,8910,-18108,8456,-7721,-19177,-9906,-3819,-4620,-18572,16525,578,2401,-12949,-3160,-2589,-6409,275,-12902,11176,-7696,12130,-5789,3283,607,6536,-11055,-6286,-11870,-6546,-6015,-15335,12779,-8025,545,9700,81,-4931,6640,9330,6368,-4350,10579,2102,-15189,18978,3677,692,-26067,1001,3226,-635,18134,9120,-8060,7276,-642,2261,-5355,-7268,8739,13835,-16022,-11362,6033,-728,1158,-7610,-16001,3160,-3699,10647,-7999,-8004,1844,-2609,-3023,857,-2673,-2481,6715,-21075,-1937,-2255,-4177,-5582,3869,-3341,-11594,7208,-12311,3786,12357,-8477,730,-21769,-1277,-4878,-9327,-13378,7187,-5952,-3224,-10495,-7558,-1633,-7102,-16883,-5727,-7165,5985,4896,6329,10087,10643,15248,7898,13385,-7175,-9475,3024,2447,59,10197,7564,14028,-9173,-2064,2240,-6144,11231,-8078,17785,10980,-13085,4588,813,4962,5845,-5735,6470,10330,6800,11784,201,7110,8304,-1491,-12663,-8343,3356,-170,-2369,-18825,19704,2431,-1560,-5828,5471,4814,-3366,-4769,-8335,-9521,-12535,-2222,15295,1592,-9822,-12471,13742,-10666,-24201,5218,307,12554,-1429,-10966,12164,10734,-1842,10853,-7763,-2342,-1116,-13322,-15520,-9145,12852,-3373,-78,-5848,1136,-4257,-23732,-1950,9114};


void encrypt(char *id, void *key, void *ct){
  char r32[32];
  octet R32, KEY, CT;
  R32.len = KEY.len = 32;
  R32.max = KEY.len = 32;
  R32.val = (char *) r32;
  KEY.val = (char *) key;
  CT.len = CT.max = 4000;
  CT.val = (char *) ct;
  while(getrandom(r32, 32, 0) != 32);
  PQIBE_CCA_ENCRYPT(id, &R32, &KEY, &CT);
}

  
void decrypt(char *id, const int16_t *csk, void *ct, void *key){
  octet KEY, CT;
  KEY.len = 32;
  KEY.val = (char *) key;
  CT.len = CT.max = 4000;
  CT.val = (char *) ct;
  PQIBE_CCA_DECRYPT(id, sk_id, &CT, &KEY);
}

void masterpublic(void *key){
  PQIBE_master_public((unsigned char *) key);
}

